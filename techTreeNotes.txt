Design notes for tech tree subcomponent.

Attempt at specification:

 This system stores a directed graph of technologies. - global
 It needs to store progress in unlocking these technologies. - player
 It needs to allow multiple clients to track their progress independently. - player
 It needs to load the tech nodes from an object store with the correct connections - global
 It needs to load the progress also. - player
 It needs to allow targets to be selected for research - player
 It needs to allow research to be applied to that target. - player
 It needs to track when the research is done. - player
 It needs to allow unlocked technologies to implement side effects - player
    The side effects are essentially unrestricted. Best would be to allow extensibility and hooking of arbitrary side effects.
 It needs to allow querying:
   - Pull entire tree (or subsections) for visualisation - global
   - Pull current target - player
   - Pull potential targets - player
   - Pull completed technologies - player
 It needs to support saving of current state - player
 It needs to allow traversal of the tree
   - Root node
   - Find node
   - Iterator
It needs to allow tech nodes to have their effects read out

 
Optional:
May want to support tech families (biotech, physics etc)
May want to support invisible techs 
May want to support complex tech completion (i.e. not just rack up research points, requires milestones to be completed)
May want general tech strategies:
  - Insulate (use technology as barrier to overcome survivability)
  - Cultivate (use technology to terraform environment to better suit humans)
  - Assimilate (use technology to transform humans to be better adapted to environment)

Things to decide:

- Instantiation 
  - One global tree?
  - One per agency? 
  - Global tree but agencies track own progress?
   - Global tree. Player tech model with reference to it that stores progress, targets etc
- Node interface
- Progress tracking 
  - In node?
  - Top level?
- Side effects
  - Abstract node with subclasses implementing?
  - Mixins?
  - Pluggable interface?
  - Tech effect class? 


Proposed architecture:

- Tech tree class
  - Top level class to contain tech tree 
  - Not really a tree, actually a directed acyclic graph - multiple roots
  - Loads graph 
  - Methods to look up, find neighbours etc. (decide this)
  - Sensible data structure to support this (decide this)
  - (Tech classes)

- Player tech class
  - Stores player state in tech tree
  - Current target
  - Researched techs
  - Progress
  - Potential targets
  - (Visible techs)
  - (Tech modifiers)
  - Outer interface to player system

- Tech node
  - Represents an individual tech
  - id 
  - name
  - description
  - cost 
  - prerequisites (likely derived)
  - descendents (likely derived)
  - (category)
  - effects 
  - (requirements) (non-tech milestones to unlock)

- Tech effect
  - Extensible class to allow arbitrary effects to be implemented
  - Likely an abstract base class and specific subclasses for particular effects (unlock tech, unlock building, reduce costs etc)
  - Effects need to be player specific
  - Need to decide - architecture for distributing effects (message queues? Pub/sub? Direct call to player tech?) 
